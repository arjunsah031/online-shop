// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
   previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
// model User {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   fname      String   @db.String
//   lname      String   @db.String
//   email      String   @unique @db.String
//   provider   String?  @db.String
//   externalId String   @db.String
//   image      String?  @db.String
//   role       String   @default("customer") @db.String
//   updatedAt  DateTime @default(now()) @updatedAt
//   createdAt  DateTime @default(now())
// }

// model Products {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   name        String   @db.String
//   description String?  @db.String
//   price       Int      @db.Int
//   updatedAt   DateTime @default(now()) @map("updated_at") 
//   createdAt   DateTime @default(now()) @map("created_at")

//   @@map("products") // Maps this model to the "products" collection
// }

// model Warehouse {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   name      String   @map("name")
//   pincode   String   @map("pincode")
//   updatedAt DateTime @default(now()) @map("updated_at")
//   createdAt DateTime @default(now()) @map("created_at")

//   @@index([pincode], map: "pincode_idx")
// }

// model Order {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId    String   @map("user_id")
//   status    String   @map("status")
//   type      String   @map("type") @default("quick")
//   price     Int      @map("price")
//   address   String   @map("address")
//   productId String   @map("product_id")
//   qty       Int      @map("qty")
//   updatedAt DateTime @default(now()) @map("updated_at")
//   createdAt DateTime @default(now()) @map("created_at")

//   @@index([userId])
//   @@index([productId])
// }


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  fname     String   @map("fname")
  lname     String   @map("lname")
  email     String   @unique @map("email")
  provider  String?  @map("provider")
  externalId String  @map("external_id")
  image     String?  @map("image")
  role      String   @default("customer") @map("role")
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  orders    Order[]
}

model Product {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @map("name")
  image     String?  @map("image")
  description String? @map("description")
  price     Int      @map("price")
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  orders    Order[]
  inventories Inventory[]
}

model Warehouse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @map("name")
  pincode   String   @map("pincode")
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  deliveryPersons DeliveryPerson[]
  inventories Inventory[]
}

model Order {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @map("user_id") @db.ObjectId
  status    String   @map("status")
  type      String   @default("quick") @map("type")
  price     Int      @map("price")
  address   String   @map("address")
  productId String   @map("product_id") @db.ObjectId
  qty       Int      @map("qty")
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: NoAction)
  deliveryPersons DeliveryPerson[]
  inventories Inventory[]
}

model DeliveryPerson {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @map("name")
  phone     String   @map("phone")
  warehouseId String? @map("warehouse_id") @db.ObjectId
  orderId   String?  @map("order_id") @db.ObjectId
  updatedAt DateTime @default(now()) @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  warehouse Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  order     Order?     @relation(fields: [orderId], references: [id], onDelete: SetNull)
}

model Inventory {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  sku         String   @unique @map("sku")
  orderId     String?  @map("order_id") @db.ObjectId
  warehouseId String?  @map("warehouse_id") @db.ObjectId
  productId   String?  @map("product_id") @db.ObjectId
  updatedAt   DateTime @default(now()) @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  order       Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  warehouse   Warehouse? @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  product     Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
